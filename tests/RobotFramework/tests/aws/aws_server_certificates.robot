*** Settings ***
Documentation       Verify that thin-edge.io can successfully connect to AWS IoT Core

Resource            ../../resources/common.resource
Library             ThinEdgeIO
Library             AWS

Test Setup          Custom Setup
Test Teardown       Get Logs
Test Template       Connect using certificates generated by AWS

Test Tags           theme:mqtt    theme:aws    test:on_demand


*** Test Cases ***
Connect to AWS using mosquitto bridge    builtin_bridge=false
Connect to AWS using built-in bridge    builtin_bridge=true


*** Keywords ***
Custom Setup
    ${DEVICE_SN}=    Setup
    Set Suite Variable    ${DEVICE_SN}

    ${aws}=    AWS.Create Thing With Self-Signed Certificate    name=${DEVICE_SN}
    Execute Command    printf -- '${aws.private_key}' > $(tedge config get device.key_path)
    Execute Command    printf -- '${aws.public_key}' > $(tedge config get device.cert_path)
    Execute Command    sudo tedge config set aws.url ${aws.url}

Connect using certificates generated by AWS
    [Arguments]    ${builtin_bridge}
    Execute Command    tedge config set mqtt.bridge.built_in ${builtin_bridge}
    ${stdout}=    Execute Command    sudo tedge connect aws    retries=0
    Should Not Contain    ${stdout}    Warning: Bridge has been configured, but Aws connection check failed
    ThinEdgeIO.Service Health Status Should Be Up    tedge-mapper-aws

    ${bridge_service_name}=    Get Bridge Service Name    aws
    ThinEdgeIO.Should Have MQTT Messages
    ...    te/device/main/service/${bridge_service_name}/status/health
    ...    message_pattern=^(1|.*"status":"up".*)$

    # Check telemetry data
    ${cloud_topic}=    AWS.Get Cloud Telemetry Topic
    ...    common_name=${DEVICE_SN}
    ...    te_topic=te/device/main///m/environment
    AWS.Start MQTT Logger
    Execute Command    tedge mqtt pub te/device/main///m/environment '{"outside_temp":28.9}'
    ${messages}=    AWS.Should Have MQTT Messages    topic=${cloud_topic}    min_count=1
    Should Not Be Empty    ${messages}

    # Send data to thin-edge.io
    ${cloud_cmd_topic}=    AWS.Get Cloud Command Topic    ${DEVICE_SN}    topic_suffix=foo/bar
    AWS.Publish MQTT Message    ${cloud_cmd_topic}    {"some":"payload"}

    ${local_cmd_topic}=    AWS.Get Local Command Topic    topic_suffix=foo/bar
    ThinEdgeIO.Should Have MQTT Messages    topic=${local_cmd_topic}    message_contains={"some":"payload"}
